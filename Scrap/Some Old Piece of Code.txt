// --- Pseudocode for checking well defended pieces --- //
// 4. A sum total of protected pieces so, count number of pieces that have a neighbour of itself, and exclude the piece itself from the sum.
if(state[row][column].contains("1"))
{
	// Player one...
	if(row <= 1 && row <= 7 && column >= 1 && column <= 6 && state[row-1][column-1].contains("1") && state[row-1][column+1].contains("1"))
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.20;
	}
	// 5. Defense against kings. I probably should change row >= 0 to 1 instead but, I will look into this.
	if(row >= 0 && row <= 6 && column >= 1 && column <= 6 && state[row+1][column-1].contains("1") && state[row+1][column+1].contains("1"))
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.10;
	}
	// 6. Defense - pieces on the side of the board.
	if(column == 0 || column == 7)
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.20;
	}
}
if(state[row][column].contains("2"))
{
	// Player two...
	if(row >= 0 && row <= 6 && column >= 1 && column <= 6 && state[row+1][column-1].contains("2") && state[row+1][column+1].contains("2"))
	{
		// Increase the number of pieces that are well protected for player two.
		playerTwoDefense = playerTwoDefense + 0.20;
	}
	// 5. Defense against kings. 
	if(row >= 1 && row <= 7 && column >= 1 && column <= 6 && state[row-1][column-1].contains("2") && state[row-1][column+1].contains("2"))
	{
		// Increase the number of pieces that are well protected for player two.
		playerTwoDefense = playerTwoDefense + 0.10;
	}
	// 6. Defense - pieces on the side of the board.
	if(column == 0 || column == 7)
	{
		// Increase the number of pieces that are well protected for player one.
		playerTwoDefense = playerTwoDefense + 0.20;
	}
}
// --- End of pseudocode for well defended pieces --- //


// -------------------------------------------------------------------------------------------------------------------------------------- //
// --- End of Alpha-Beta Experiment -- //
	public double minimax(Tree<String[][]> passNode, int depth, boolean maximisingPlayer, String playerNo, String opponentNo)
	{
		// Base case...
		if(depth == 0) 
		{
			// Calculate and return the heuristic value.
			return evaluateNode(passNode, playerNo, opponentNo);
		}
		if(maximisingPlayer == true)
		{
			// Debug purposes.
			System.out.println("Maximising Player:"); 
			// If it is a MAX node...
			// An experiment
			Tree<String[][]> bestMove = null;
			// Initially negative infinity.
			double bestValue = Double.NEGATIVE_INFINITY;
			// Generate the children - This will correspond to the root MAX node which will create MIN nodes... This works okay.
			//createChildren(passNode, "2", "1");
			createChildren(passNode, playerNo, opponentNo);
			// Grab the children of the node passed in.
			ArrayList<Tree<String[][]>> children = passNode.children();
			
			// --- An experiment --- //
			
			if(children.size() > 0)
			{
				// For each child of the (parent) node
				for(Tree<String[][]> child : children)
				{
					// Recursion call, y'all.
					double value = minimax(child, depth-1, false, playerNo, opponentNo);
					// Debug purposes.
					System.out.println("The depth of the node ");
					System.out.print("max(" + bestValue + ", ");
					// If the new value obtained is larger than the previous bestValue, update the 'bestValue' with the new value.
					// bestValue = Math.max(bestValue, value);
					
					if(value > bestValue)
					{
						bestValue = value;
						// Store the best move... I hope. All this time I have been saving passNode not 'child'... Hopefully, it works now.	
						// An experiment. using 'passNode' always picks the last moveable piece in the tree.		
						if(passNode.isRoot())
						{
							// Well, it picks sometimes first child, and even second child. It may actually be working now. I'll run some more tests.
							// It cleverly avoided the pieces when the CPU had only one piece left. Yup, this works :)
							// Debug purposes.
							System.out.println("This is the root node within in the minimax recursive stack and here are the contents of one child from root:");
							// Print the board, yup.
							printCheckersBoard(child.getValue());
							// Store the greatest move.
							greatestMove = child;	
						}	
					}
					
					// Debug purposes.
					System.out.println(value + ") is " + bestValue);
				}
			}else
			{
				// Debug purposes. This is for the purpose of when the bot has only one piece left on the board, and it's cornered (about to be captured.)
				System.out.println("We will evaluate passNode earlier than the cut-off depth because it has no children...");
				// An attempt to evaluate the node early.
				bestValue = minimax(passNode, 0, false, playerNo, opponentNo);
			}
			// Return the overall result.
			return bestValue;
			
		}else //if(maximisingPlayer = false)
		{
			// If it is a MIN node...
			// Debug purposes.
			System.out.println("Minimising Player:"); 
			// An experiment
			Tree<String[][]> bestMove = null;
			// Initially positive infinity.
			double bestValue = Double.POSITIVE_INFINITY;
			// Generate the children - the new states will be created in the method below. This corresponds to the MIN Nodes which will create MAX nodes.
			// createChildren(passNode, "1", "2");
			createChildren(passNode, opponentNo, playerNo);
			// Grab the children of the node passed in.
			ArrayList<Tree<String[][]>> children = passNode.children();
			
			if(children.size() > 0)
			{
				// For each child of the (parent) node
				for(Tree<String[][]> child : children)
				{
					// A recursive call that will eventually assign the result of that call into 'value'.
					double value = minimax(child, depth-1, true, playerNo, opponentNo);
					// Debug purposes.
					System.out.print("min(" + bestValue + ", ");
					// If the new value obtained is smaller than the previous bestValue, update the 'bestValue' with the new value.
					// bestValue = Math.min(bestValue, value);
					
					if(value < bestValue)
					{
						bestValue = value;
						// Store the best move... I hope. Oh, shit, I think I am passing in the wrong node.
						// An experiment. using 'passNode' always picks the last moveable piece in the tree.		
						if(passNode.isRoot())
						{
							// Debug purposes.
							System.out.println("This is the root node within in the minimax recursive stack and here are the contents of one child from root:");
							// Print the board, yup.
							printCheckersBoard(child.getValue());
							// Store the greatest move.
							greatestMove = child;	
						}	
					}
					// Debug purposes.
					System.out.println(value + ") is " + bestValue);
				}
			}else
			{
				// Debug purposes. This is for the purpose of when the bot has only one piece left on the board, and it's cornered (about to be captured.)
				// When it is MIN's turn and assuming a final capture happened beforehand (at MAX), Min would have no pieces to move, resulting in no
				// children created so, because the game would be the won by the opponent, there are no more possible moves that can be made so,
				// we evaluate earlier, which seems to be working well.
				System.out.println("We will evaluate passNode earlier than the cut-off depth because it has no children...");
				// An attempt to evaluate the node early.
				bestValue = minimax(passNode, 0, true, playerNo, opponentNo);
			}
			// Return the overall result.
			return bestValue;
		}
	}