// --- Pseudocode for checking well defended pieces --- //
// 4. A sum total of protected pieces so, count number of pieces that have a neighbour of itself, and exclude the piece itself from the sum.
if(state[row][column].contains("1"))
{
	// Player one...
	if(row <= 1 && row <= 7 && column >= 1 && column <= 6 && state[row-1][column-1].contains("1") && state[row-1][column+1].contains("1"))
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.20;
	}
	// 5. Defense against kings. I probably should change row >= 0 to 1 instead but, I will look into this.
	if(row >= 0 && row <= 6 && column >= 1 && column <= 6 && state[row+1][column-1].contains("1") && state[row+1][column+1].contains("1"))
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.10;
	}
	// 6. Defense - pieces on the side of the board.
	if(column == 0 || column == 7)
	{
		// Increase the number of pieces that are well protected for player one.
		playerOneDefense = playerOneDefense + 0.20;
	}
}
if(state[row][column].contains("2"))
{
	// Player two...
	if(row >= 0 && row <= 6 && column >= 1 && column <= 6 && state[row+1][column-1].contains("2") && state[row+1][column+1].contains("2"))
	{
		// Increase the number of pieces that are well protected for player two.
		playerTwoDefense = playerTwoDefense + 0.20;
	}
	// 5. Defense against kings. 
	if(row >= 1 && row <= 7 && column >= 1 && column <= 6 && state[row-1][column-1].contains("2") && state[row-1][column+1].contains("2"))
	{
		// Increase the number of pieces that are well protected for player two.
		playerTwoDefense = playerTwoDefense + 0.10;
	}
	// 6. Defense - pieces on the side of the board.
	if(column == 0 || column == 7)
	{
		// Increase the number of pieces that are well protected for player one.
		playerTwoDefense = playerTwoDefense + 0.20;
	}
}
// --- End of pseudocode for well defended pieces --- //